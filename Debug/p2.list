
p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800046c  0800046c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000478  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000024  08000478  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00000aab  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000002ba  00000000  00000000  00020adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000088  00000000  00000000  00020da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00020e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000448  00000000  00000000  00020e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000428  00000000  00000000  000212d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000216f8  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000011c  00000000  00000000  00021774  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00021890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000454 	.word	0x08000454

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000454 	.word	0x08000454

08000204 <main>:

int frequencia = 2;
int count = 0;

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	void timer14hz(void);
	void toggleC(long int pin);
	int contaAte();

  RCC->AHB1ENR=0x00000087;  // inicializa o clock;
 800020a:	4b2b      	ldr	r3, [pc, #172]	; (80002b8 <main+0xb4>)
 800020c:	2287      	movs	r2, #135	; 0x87
 800020e:	631a      	str	r2, [r3, #48]	; 0x30

  RCC->APB2ENR|=0x20000;  // inicializa o clock do TIMER10;
 8000210:	4a29      	ldr	r2, [pc, #164]	; (80002b8 <main+0xb4>)
 8000212:	4b29      	ldr	r3, [pc, #164]	; (80002b8 <main+0xb4>)
 8000214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800021a:	6453      	str	r3, [r2, #68]	; 0x44
  TIM10->PSC=1999;  // coloca o PSC para ;
 800021c:	4b27      	ldr	r3, [pc, #156]	; (80002bc <main+0xb8>)
 800021e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000222:	629a      	str	r2, [r3, #40]	; 0x28
  TIM10->ARR=570;  // coloca o ARR para ;
 8000224:	4b25      	ldr	r3, [pc, #148]	; (80002bc <main+0xb8>)
 8000226:	f240 223a 	movw	r2, #570	; 0x23a
 800022a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM10->CR1|=0x0005;  // habilita a contagem do TIMER10;
 800022c:	4a23      	ldr	r2, [pc, #140]	; (80002bc <main+0xb8>)
 800022e:	4b23      	ldr	r3, [pc, #140]	; (80002bc <main+0xb8>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 0305 	orr.w	r3, r3, #5
 8000236:	6013      	str	r3, [r2, #0]
	TIM10->SR&=~(0x0001);  // "resetar" o cronômetro, botando zero no bit em questão;
 8000238:	4a20      	ldr	r2, [pc, #128]	; (80002bc <main+0xb8>)
 800023a:	4b20      	ldr	r3, [pc, #128]	; (80002bc <main+0xb8>)
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	f023 0301 	bic.w	r3, r3, #1
 8000242:	6113      	str	r3, [r2, #16]

  GPIOA->MODER=0x28000000;  // configura a função de Debugger com o ARM;
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <main+0xbc>)
 8000246:	f04f 5220 	mov.w	r2, #671088640	; 0x28000000
 800024a:	601a      	str	r2, [r3, #0]

  GPIOC->MODER=0X00000001; // PC0 para modo saida; PC13 ja esta como entrada (0x00);
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <main+0xc0>)
 800024e:	2201      	movs	r2, #1
 8000250:	601a      	str	r2, [r3, #0]


  while (1) {
	if (((GPIOC->IDR)&0x00002000) == 0x0) {  // testa se o o pino da posição 13 é nível lógico baixo;
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <main+0xc0>)
 8000254:	691b      	ldr	r3, [r3, #16]
 8000256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800025a:	2b00      	cmp	r3, #0
 800025c:	d11b      	bne.n	8000296 <main+0x92>
		for (int i = 0; i < 10000; i++);
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	e002      	b.n	800026a <main+0x66>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3301      	adds	r3, #1
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000270:	4293      	cmp	r3, r2
 8000272:	ddf7      	ble.n	8000264 <main+0x60>
		if (((GPIOC->IDR)&0x00002000) == 0x0) {
 8000274:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <main+0xc0>)
 8000276:	691b      	ldr	r3, [r3, #16]
 8000278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800027c:	2b00      	cmp	r3, #0
 800027e:	d10a      	bne.n	8000296 <main+0x92>
			if (frequencia == 2) {
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0xc4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	2b02      	cmp	r3, #2
 8000286:	d103      	bne.n	8000290 <main+0x8c>
				frequencia = 7;
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <main+0xc4>)
 800028a:	2207      	movs	r2, #7
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	e002      	b.n	8000296 <main+0x92>
			} else {
				frequencia = 2;
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <main+0xc4>)
 8000292:	2202      	movs	r2, #2
 8000294:	601a      	str	r2, [r3, #0]
			}
		}
	}
	timer14hz();
 8000296:	f000 f82b 	bl	80002f0 <timer14hz>
	if (count >= contaAte()) {
 800029a:	f000 f819 	bl	80002d0 <contaAte>
 800029e:	4602      	mov	r2, r0
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <main+0xc8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	dcd4      	bgt.n	8000252 <main+0x4e>
		count = 0;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <main+0xc8>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
		toggleC(0x00000001);  // inverte o PC0;
 80002ae:	2001      	movs	r0, #1
 80002b0:	f000 f83a 	bl	8000328 <toggleC>
	if (((GPIOC->IDR)&0x00002000) == 0x0) {  // testa se o o pino da posição 13 é nível lógico baixo;
 80002b4:	e7cd      	b.n	8000252 <main+0x4e>
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40014400 	.word	0x40014400
 80002c0:	40020000 	.word	0x40020000
 80002c4:	40020800 	.word	0x40020800
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000020 	.word	0x20000020

080002d0 <contaAte>:
	}
  }
}

int contaAte() {
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	if (frequencia == 2) {
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <contaAte+0x1c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2b02      	cmp	r3, #2
 80002da:	d101      	bne.n	80002e0 <contaAte+0x10>
		return doisHz;
 80002dc:	2307      	movs	r3, #7
 80002de:	e000      	b.n	80002e2 <contaAte+0x12>
	} else {
		return seteHz;
 80002e0:	2302      	movs	r3, #2
	}
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	20000000 	.word	0x20000000

080002f0 <timer14hz>:

void timer14hz (void) {
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	if((TIM10->SR & 0x0001) == 0x0001) {  // verifica se o cronômetro foi "setado" (acabou a contagem);
 80002f4:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <timer14hz+0x30>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	f003 0301 	and.w	r3, r3, #1
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d10a      	bne.n	8000316 <timer14hz+0x26>
		// enquanto o cronômetro não for "setado para 1", a contagem irá continuar dentro desse while;
		TIM10->SR&=~(0x0001);  // "resetar" o cronômetro, botando zero no bit em questão;
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <timer14hz+0x30>)
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <timer14hz+0x30>)
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	f023 0301 	bic.w	r3, r3, #1
 800030a:	6113      	str	r3, [r2, #16]
		count++;
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <timer14hz+0x34>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	4a04      	ldr	r2, [pc, #16]	; (8000324 <timer14hz+0x34>)
 8000314:	6013      	str	r3, [r2, #0]
	}
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40014400 	.word	0x40014400
 8000324:	20000020 	.word	0x20000020

08000328 <toggleC>:

void toggleC(long int pin) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	GPIOC->ODR ^=  pin;
 8000330:	4905      	ldr	r1, [pc, #20]	; (8000348 <toggleC+0x20>)
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <toggleC+0x20>)
 8000334:	695a      	ldr	r2, [r3, #20]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4053      	eors	r3, r2
 800033a:	614b      	str	r3, [r1, #20]
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40020800 	.word	0x40020800

0800034c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800034c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000384 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000352:	e003      	b.n	800035c <LoopCopyDataInit>

08000354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800035a:	3104      	adds	r1, #4

0800035c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800035c:	480b      	ldr	r0, [pc, #44]	; (800038c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000364:	d3f6      	bcc.n	8000354 <CopyDataInit>
  ldr  r2, =_sbss
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000368:	e002      	b.n	8000370 <LoopFillZerobss>

0800036a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800036a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800036c:	f842 3b04 	str.w	r3, [r2], #4

08000370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000374:	d3f9      	bcc.n	800036a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000376:	f000 f813 	bl	80003a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800037a:	f000 f847 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800037e:	f7ff ff41 	bl	8000204 <main>
  bx  lr    
 8000382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000384:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000388:	08000474 	.word	0x08000474
  ldr  r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000390:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000394:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000398:	20000024 	.word	0x20000024

0800039c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800039c:	e7fe      	b.n	800039c <ADC_IRQHandler>
	...

080003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a4:	4a16      	ldr	r2, [pc, #88]	; (8000400 <SystemInit+0x60>)
 80003a6:	4b16      	ldr	r3, [pc, #88]	; (8000400 <SystemInit+0x60>)
 80003a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <SystemInit+0x64>)
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <SystemInit+0x64>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <SystemInit+0x64>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003c6:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <SystemInit+0x64>)
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <SystemInit+0x64>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <SystemInit+0x64>)
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <SystemInit+0x68>)
 80003da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <SystemInit+0x64>)
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <SystemInit+0x64>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <SystemInit+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003ee:	4b04      	ldr	r3, [pc, #16]	; (8000400 <SystemInit+0x60>)
 80003f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003f4:	609a      	str	r2, [r3, #8]
#endif
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	e000ed00 	.word	0xe000ed00
 8000404:	40023800 	.word	0x40023800
 8000408:	24003010 	.word	0x24003010

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4e0d      	ldr	r6, [pc, #52]	; (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	; (8000448 <__libc_init_array+0x3c>)
 8000412:	1ba4      	subs	r4, r4, r6
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2500      	movs	r5, #0
 8000418:	42a5      	cmp	r5, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4e0b      	ldr	r6, [pc, #44]	; (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	; (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1ba4      	subs	r4, r4, r6
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2500      	movs	r5, #0
 800042a:	42a5      	cmp	r5, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000434:	4798      	blx	r3
 8000436:	3501      	adds	r5, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800043e:	4798      	blx	r3
 8000440:	3501      	adds	r5, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800046c 	.word	0x0800046c
 8000448:	0800046c 	.word	0x0800046c
 800044c:	0800046c 	.word	0x0800046c
 8000450:	08000470 	.word	0x08000470

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
